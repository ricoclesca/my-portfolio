name: CI/CD to AWS ECS

on:
  push:
    branches: [ "main" ]

jobs:
  build-scan-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build Docker image
      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: portfolio
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      # Scan with Trivy before push
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/portfolio:${{ github.run_numbers }}
          format: 'table'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'

      # Push to ECR (only if scan passes)
      - name: Push Docker image
        if: success()
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: portfolio
          IMAGE_TAG: ${{ github.run_numbers }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build-scan-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH and deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          #port: ${{ secrets.SERVER_PORT }}
          script: |
            docker rm -f portfolio || true
            docker run -d --name portfolio -p 8080:5001 ${{ secrets.DOCKER_USERNAME }}/portfolio-images:${{ github.run_number }}

      # Deploy to ECS
    #   - name: Deploy to Amazon ECS
    #     if: success()
    #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #     with:
    #       task-definition: ecs-task-def.json
    #       service: portfolio-service
    #       cluster: portfolio-cluster
    #       wait-for-service-stability: true
          