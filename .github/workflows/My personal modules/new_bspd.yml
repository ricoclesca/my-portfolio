name: CI/CD to AWS via SSH

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: portfolio-images
  IMAGE_TAG: portfolio: ${{ github.run_number }}
  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  REMOTE_USER: ${{ secrets.REMOTE_USER }}
  REMOTE_KEY: ${{ secrets.REMOTE_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::570546977829:role/GitHub_OIDC_Token
          aws-region: ${{ AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        id: meta
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker build -t $IMAGE_URI .
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

  scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: table

  push:
    runs-on: ubuntu-latest
    needs: scan
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push image to Amazon ECR
        run: |
          docker push ${{ needs.build.outputs.image }}

  deploy:
    runs-on: ubuntu-latest
    needs: push
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.REMOTE_KEY }}
          script: |
            docker pull ${{ needs.build.outputs.image }}
            docker stop my-app || true
            docker rm my-app || true
            docker run -d --name my-app -p 80:80 ${{ needs.build.outputs.image }}